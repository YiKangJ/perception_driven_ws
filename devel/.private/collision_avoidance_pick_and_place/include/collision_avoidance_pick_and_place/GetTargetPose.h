// Generated by gencpp from file collision_avoidance_pick_and_place/GetTargetPose.msg
// DO NOT EDIT!


#ifndef COLLISION_AVOIDANCE_PICK_AND_PLACE_MESSAGE_GETTARGETPOSE_H
#define COLLISION_AVOIDANCE_PICK_AND_PLACE_MESSAGE_GETTARGETPOSE_H

#include <ros/service_traits.h>


#include <collision_avoidance_pick_and_place/GetTargetPoseRequest.h>
#include <collision_avoidance_pick_and_place/GetTargetPoseResponse.h>


namespace collision_avoidance_pick_and_place
{

struct GetTargetPose
{

typedef GetTargetPoseRequest Request;
typedef GetTargetPoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetTargetPose
} // namespace collision_avoidance_pick_and_place


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::collision_avoidance_pick_and_place::GetTargetPose > {
  static const char* value()
  {
    return "465d51d8a3f39b4cd4049318ef31b315";
  }

  static const char* value(const ::collision_avoidance_pick_and_place::GetTargetPose&) { return value(); }
};

template<>
struct DataType< ::collision_avoidance_pick_and_place::GetTargetPose > {
  static const char* value()
  {
    return "collision_avoidance_pick_and_place/GetTargetPose";
  }

  static const char* value(const ::collision_avoidance_pick_and_place::GetTargetPose&) { return value(); }
};


// service_traits::MD5Sum< ::collision_avoidance_pick_and_place::GetTargetPoseRequest> should match 
// service_traits::MD5Sum< ::collision_avoidance_pick_and_place::GetTargetPose > 
template<>
struct MD5Sum< ::collision_avoidance_pick_and_place::GetTargetPoseRequest>
{
  static const char* value()
  {
    return MD5Sum< ::collision_avoidance_pick_and_place::GetTargetPose >::value();
  }
  static const char* value(const ::collision_avoidance_pick_and_place::GetTargetPoseRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::collision_avoidance_pick_and_place::GetTargetPoseRequest> should match 
// service_traits::DataType< ::collision_avoidance_pick_and_place::GetTargetPose > 
template<>
struct DataType< ::collision_avoidance_pick_and_place::GetTargetPoseRequest>
{
  static const char* value()
  {
    return DataType< ::collision_avoidance_pick_and_place::GetTargetPose >::value();
  }
  static const char* value(const ::collision_avoidance_pick_and_place::GetTargetPoseRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::collision_avoidance_pick_and_place::GetTargetPoseResponse> should match 
// service_traits::MD5Sum< ::collision_avoidance_pick_and_place::GetTargetPose > 
template<>
struct MD5Sum< ::collision_avoidance_pick_and_place::GetTargetPoseResponse>
{
  static const char* value()
  {
    return MD5Sum< ::collision_avoidance_pick_and_place::GetTargetPose >::value();
  }
  static const char* value(const ::collision_avoidance_pick_and_place::GetTargetPoseResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::collision_avoidance_pick_and_place::GetTargetPoseResponse> should match 
// service_traits::DataType< ::collision_avoidance_pick_and_place::GetTargetPose > 
template<>
struct DataType< ::collision_avoidance_pick_and_place::GetTargetPoseResponse>
{
  static const char* value()
  {
    return DataType< ::collision_avoidance_pick_and_place::GetTargetPose >::value();
  }
  static const char* value(const ::collision_avoidance_pick_and_place::GetTargetPoseResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // COLLISION_AVOIDANCE_PICK_AND_PLACE_MESSAGE_GETTARGETPOSE_H
