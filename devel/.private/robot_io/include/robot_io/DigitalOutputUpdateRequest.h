// Generated by gencpp from file robot_io/DigitalOutputUpdateRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_IO_MESSAGE_DIGITALOUTPUTUPDATEREQUEST_H
#define ROBOT_IO_MESSAGE_DIGITALOUTPUTUPDATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_io
{
template <class ContainerAllocator>
struct DigitalOutputUpdateRequest_
{
  typedef DigitalOutputUpdateRequest_<ContainerAllocator> Type;

  DigitalOutputUpdateRequest_()
    : request_type(0)
    , bit_index(0)
    , output_bit_state(false)  {
    }
  DigitalOutputUpdateRequest_(const ContainerAllocator& _alloc)
    : request_type(0)
    , bit_index(0)
    , output_bit_state(false)  {
  (void)_alloc;
    }



   typedef uint32_t _request_type_type;
  _request_type_type request_type;

   typedef uint32_t _bit_index_type;
  _bit_index_type bit_index;

   typedef uint8_t _output_bit_state_type;
  _output_bit_state_type output_bit_state;



  enum {
    COUNT = 8u,
    SUCTION1_ON = 1u,
    SUCTION2_ON = 2u,
    COLLISION = 0u,
  };


  typedef boost::shared_ptr< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DigitalOutputUpdateRequest_

typedef ::robot_io::DigitalOutputUpdateRequest_<std::allocator<void> > DigitalOutputUpdateRequest;

typedef boost::shared_ptr< ::robot_io::DigitalOutputUpdateRequest > DigitalOutputUpdateRequestPtr;
typedef boost::shared_ptr< ::robot_io::DigitalOutputUpdateRequest const> DigitalOutputUpdateRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_io

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4386f6831da36b77a99649158a65fbe";
  }

  static const char* value(const ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4386f6831da36b7ULL;
  static const uint64_t static_value2 = 0x7a99649158a65fbeULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_io/DigitalOutputUpdateRequest";
  }

  static const char* value(const ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 request_type\n\
uint32 bit_index\n\
bool output_bit_state\n\
\n\
uint32 COUNT=8\n\
uint32 SUCTION1_ON=1\n\
uint32 SUCTION2_ON=2\n\
uint32 COLLISION=0\n\
";
  }

  static const char* value(const ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request_type);
      stream.next(m.bit_index);
      stream.next(m.output_bit_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DigitalOutputUpdateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_io::DigitalOutputUpdateRequest_<ContainerAllocator>& v)
  {
    s << indent << "request_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.request_type);
    s << indent << "bit_index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.bit_index);
    s << indent << "output_bit_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.output_bit_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_IO_MESSAGE_DIGITALOUTPUTUPDATEREQUEST_H
