// Generated by gencpp from file object_manipulation_msgs/GraspHandPostureExecutionGoal.msg
// DO NOT EDIT!


#ifndef OBJECT_MANIPULATION_MSGS_MESSAGE_GRASPHANDPOSTUREEXECUTIONGOAL_H
#define OBJECT_MANIPULATION_MSGS_MESSAGE_GRASPHANDPOSTUREEXECUTIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_manipulation_msgs
{
template <class ContainerAllocator>
struct GraspHandPostureExecutionGoal_
{
  typedef GraspHandPostureExecutionGoal_<ContainerAllocator> Type;

  GraspHandPostureExecutionGoal_()
    : goal(0)
    , max_contact_force(0.0)  {
    }
  GraspHandPostureExecutionGoal_(const ContainerAllocator& _alloc)
    : goal(0)
    , max_contact_force(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _goal_type;
  _goal_type goal;

   typedef float _max_contact_force_type;
  _max_contact_force_type max_contact_force;



  enum {
    PRE_GRASP = 1,
    GRASP = 2,
    RELEASE = 3,
  };


  typedef boost::shared_ptr< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GraspHandPostureExecutionGoal_

typedef ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<std::allocator<void> > GraspHandPostureExecutionGoal;

typedef boost::shared_ptr< ::object_manipulation_msgs::GraspHandPostureExecutionGoal > GraspHandPostureExecutionGoalPtr;
typedef boost::shared_ptr< ::object_manipulation_msgs::GraspHandPostureExecutionGoal const> GraspHandPostureExecutionGoalConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_manipulation_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'household_objects_database_msgs': ['/opt/ros/kinetic/share/household_objects_database_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg', '/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/kinetic/share/object_recognition_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'object_manipulation_msgs': ['/home/jyk/perception_driven_ws/src/object_manipulation_msgs/msg', '/home/jyk/perception_driven_ws/devel/.private/object_manipulation_msgs/share/object_manipulation_msgs/msg'], 'manipulation_msgs': ['/opt/ros/kinetic/share/manipulation_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9cec28822e940e0fb2724071cba8ee7e";
  }

  static const char* value(const ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9cec28822e940e0fULL;
  static const uint64_t static_value2 = 0xb2724071cba8ee7eULL;
};

template<class ContainerAllocator>
struct DataType< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_manipulation_msgs/GraspHandPostureExecutionGoal";
  }

  static const char* value(const ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# an action for requesting the finger posture part of grasp be physically carried out by a hand\n\
# the name of the arm being used is not in here, as this will be sent to a specific action server\n\
# for each arm\n\
\n\
# the grasp to be executed\n\
#manipulation_msgs/Grasp grasp\n\
\n\
# the goal of this action\n\
# requests that the hand be set in the pre-grasp posture\n\
int32 PRE_GRASP=1\n\
# requests that the hand execute the actual grasp\n\
int32 GRASP=2\n\
# requests that the hand open to release the object\n\
int32 RELEASE=3\n\
int32 goal\n\
\n\
# the max contact force to use (<=0 if no desired max)\n\
float32 max_contact_force\n\
\n\
";
  }

  static const char* value(const ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal);
      stream.next(m.max_contact_force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspHandPostureExecutionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_manipulation_msgs::GraspHandPostureExecutionGoal_<ContainerAllocator>& v)
  {
    s << indent << "goal: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal);
    s << indent << "max_contact_force: ";
    Printer<float>::stream(s, indent + "  ", v.max_contact_force);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_MANIPULATION_MSGS_MESSAGE_GRASPHANDPOSTUREEXECUTIONGOAL_H
