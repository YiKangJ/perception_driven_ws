# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from object_manipulation_msgs/GraspHandPostureExecutionGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GraspHandPostureExecutionGoal(genpy.Message):
  _md5sum = "9cec28822e940e0fb2724071cba8ee7e"
  _type = "object_manipulation_msgs/GraspHandPostureExecutionGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# an action for requesting the finger posture part of grasp be physically carried out by a hand
# the name of the arm being used is not in here, as this will be sent to a specific action server
# for each arm

# the grasp to be executed
#manipulation_msgs/Grasp grasp

# the goal of this action
# requests that the hand be set in the pre-grasp posture
int32 PRE_GRASP=1
# requests that the hand execute the actual grasp
int32 GRASP=2
# requests that the hand open to release the object
int32 RELEASE=3
int32 goal

# the max contact force to use (<=0 if no desired max)
float32 max_contact_force

"""
  # Pseudo-constants
  PRE_GRASP = 1
  GRASP = 2
  RELEASE = 3

  __slots__ = ['goal','max_contact_force']
  _slot_types = ['int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       goal,max_contact_force

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GraspHandPostureExecutionGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.goal is None:
        self.goal = 0
      if self.max_contact_force is None:
        self.max_contact_force = 0.
    else:
      self.goal = 0
      self.max_contact_force = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_if().pack(_x.goal, _x.max_contact_force))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.goal, _x.max_contact_force,) = _get_struct_if().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_if().pack(_x.goal, _x.max_contact_force))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.goal, _x.max_contact_force,) = _get_struct_if().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_if = None
def _get_struct_if():
    global _struct_if
    if _struct_if is None:
        _struct_if = struct.Struct("<if")
    return _struct_if
