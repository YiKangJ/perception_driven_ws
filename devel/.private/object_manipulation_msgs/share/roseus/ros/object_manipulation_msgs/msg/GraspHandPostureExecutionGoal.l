;; Auto-generated. Do not edit!


(when (boundp 'object_manipulation_msgs::GraspHandPostureExecutionGoal)
  (if (not (find-package "OBJECT_MANIPULATION_MSGS"))
    (make-package "OBJECT_MANIPULATION_MSGS"))
  (shadow 'GraspHandPostureExecutionGoal (find-package "OBJECT_MANIPULATION_MSGS")))
(unless (find-package "OBJECT_MANIPULATION_MSGS::GRASPHANDPOSTUREEXECUTIONGOAL")
  (make-package "OBJECT_MANIPULATION_MSGS::GRASPHANDPOSTUREEXECUTIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude GraspHandPostureExecutionGoal.msg.html


(intern "*PRE_GRASP*" (find-package "OBJECT_MANIPULATION_MSGS::GRASPHANDPOSTUREEXECUTIONGOAL"))
(shadow '*PRE_GRASP* (find-package "OBJECT_MANIPULATION_MSGS::GRASPHANDPOSTUREEXECUTIONGOAL"))
(defconstant object_manipulation_msgs::GraspHandPostureExecutionGoal::*PRE_GRASP* 1)
(intern "*GRASP*" (find-package "OBJECT_MANIPULATION_MSGS::GRASPHANDPOSTUREEXECUTIONGOAL"))
(shadow '*GRASP* (find-package "OBJECT_MANIPULATION_MSGS::GRASPHANDPOSTUREEXECUTIONGOAL"))
(defconstant object_manipulation_msgs::GraspHandPostureExecutionGoal::*GRASP* 2)
(intern "*RELEASE*" (find-package "OBJECT_MANIPULATION_MSGS::GRASPHANDPOSTUREEXECUTIONGOAL"))
(shadow '*RELEASE* (find-package "OBJECT_MANIPULATION_MSGS::GRASPHANDPOSTUREEXECUTIONGOAL"))
(defconstant object_manipulation_msgs::GraspHandPostureExecutionGoal::*RELEASE* 3)
(defclass object_manipulation_msgs::GraspHandPostureExecutionGoal
  :super ros::object
  :slots (_goal _max_contact_force ))

(defmethod object_manipulation_msgs::GraspHandPostureExecutionGoal
  (:init
   (&key
    ((:goal __goal) 0)
    ((:max_contact_force __max_contact_force) 0.0)
    )
   (send-super :init)
   (setq _goal (round __goal))
   (setq _max_contact_force (float __max_contact_force))
   self)
  (:goal
   (&optional __goal)
   (if __goal (setq _goal __goal)) _goal)
  (:max_contact_force
   (&optional __max_contact_force)
   (if __max_contact_force (setq _max_contact_force __max_contact_force)) _max_contact_force)
  (:serialization-length
   ()
   (+
    ;; int32 _goal
    4
    ;; float32 _max_contact_force
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32 _goal
       (write-long _goal s)
     ;; float32 _max_contact_force
       (sys::poke _max_contact_force (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32 _goal
     (setq _goal (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; float32 _max_contact_force
     (setq _max_contact_force (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get object_manipulation_msgs::GraspHandPostureExecutionGoal :md5sum-) "9cec28822e940e0fb2724071cba8ee7e")
(setf (get object_manipulation_msgs::GraspHandPostureExecutionGoal :datatype-) "object_manipulation_msgs/GraspHandPostureExecutionGoal")
(setf (get object_manipulation_msgs::GraspHandPostureExecutionGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# an action for requesting the finger posture part of grasp be physically carried out by a hand
# the name of the arm being used is not in here, as this will be sent to a specific action server
# for each arm

# the grasp to be executed
#manipulation_msgs/Grasp grasp

# the goal of this action
# requests that the hand be set in the pre-grasp posture
int32 PRE_GRASP=1
# requests that the hand execute the actual grasp
int32 GRASP=2
# requests that the hand open to release the object
int32 RELEASE=3
int32 goal

# the max contact force to use (<=0 if no desired max)
float32 max_contact_force


")



(provide :object_manipulation_msgs/GraspHandPostureExecutionGoal "9cec28822e940e0fb2724071cba8ee7e")


