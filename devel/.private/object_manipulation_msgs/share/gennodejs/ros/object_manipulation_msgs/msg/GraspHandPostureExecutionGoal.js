// Auto-generated. Do not edit!

// (in-package object_manipulation_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class GraspHandPostureExecutionGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.goal = null;
      this.max_contact_force = null;
    }
    else {
      if (initObj.hasOwnProperty('goal')) {
        this.goal = initObj.goal
      }
      else {
        this.goal = 0;
      }
      if (initObj.hasOwnProperty('max_contact_force')) {
        this.max_contact_force = initObj.max_contact_force
      }
      else {
        this.max_contact_force = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type GraspHandPostureExecutionGoal
    // Serialize message field [goal]
    bufferOffset = _serializer.int32(obj.goal, buffer, bufferOffset);
    // Serialize message field [max_contact_force]
    bufferOffset = _serializer.float32(obj.max_contact_force, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type GraspHandPostureExecutionGoal
    let len;
    let data = new GraspHandPostureExecutionGoal(null);
    // Deserialize message field [goal]
    data.goal = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [max_contact_force]
    data.max_contact_force = _deserializer.float32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 8;
  }

  static datatype() {
    // Returns string type for a message object
    return 'object_manipulation_msgs/GraspHandPostureExecutionGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '9cec28822e940e0fb2724071cba8ee7e';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # an action for requesting the finger posture part of grasp be physically carried out by a hand
    # the name of the arm being used is not in here, as this will be sent to a specific action server
    # for each arm
    
    # the grasp to be executed
    #manipulation_msgs/Grasp grasp
    
    # the goal of this action
    # requests that the hand be set in the pre-grasp posture
    int32 PRE_GRASP=1
    # requests that the hand execute the actual grasp
    int32 GRASP=2
    # requests that the hand open to release the object
    int32 RELEASE=3
    int32 goal
    
    # the max contact force to use (<=0 if no desired max)
    float32 max_contact_force
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new GraspHandPostureExecutionGoal(null);
    if (msg.goal !== undefined) {
      resolved.goal = msg.goal;
    }
    else {
      resolved.goal = 0
    }

    if (msg.max_contact_force !== undefined) {
      resolved.max_contact_force = msg.max_contact_force;
    }
    else {
      resolved.max_contact_force = 0.0
    }

    return resolved;
    }
};

// Constants for message
GraspHandPostureExecutionGoal.Constants = {
  PRE_GRASP: 1,
  GRASP: 2,
  RELEASE: 3,
}

module.exports = GraspHandPostureExecutionGoal;
